data {
	int<lower=1> K;		  		// number of clusters
	int<lower=2> N; 	  		// number of samples
	int<lower=N+1> L;	    	// number of loci
	cov_matrix[N-1] obsSigma; 	// observed projected covariance
	matrix[N, N-1] projMat;		// projection matrix
	vector[N] sampleSize;		// number of chromosomes genotyped for each sample
}
parameters {
	real<lower=0> mu[K];				// shared drift effect in cluster k
  	real<lower=0> nugget[N]; 			// sample-specific variance (allele sampling error + sample-specific drift)
	simplex[K]    w[N];    				// every sample (N in total) has a K simplex (i.e. K clusters)
	vector<lower=0>[K] DirichAlpha; 	// dirichlet prior parameters on admixture proportions
	real<lower=0> dirichHPs[K];			// hyperpriors on dirichlet parameters
}
transformed parameters {
	matrix[N-1, N-1]  projSigma;		// the mean-centered and projected covariance matrix (dim = N-1 x N-1)
	matrix[N,N] Sigma;					// this specifies the parametric, admixed covariance matrix
	for (i in 1:(N-1)){
		for (j in (i+1):N){
			Sigma[i,j] <- 0;
			for(k in 1:K){
				Sigma[i, j] <- Sigma[i,j] + w[i,k] * w[j,k] * mu[k];
			}
			Sigma[j, i] <- Sigma[i, j];
		}
	}
	for(i in 1:N){
		Sigma[i,i] <- 0;
		for(k in 1:K){
			Sigma[i, i] <- Sigma[i, i] + w[i,k]^2 * (mu[k]);
		}
		Sigma[i, i] <- Sigma[i, i] + (1-Sigma[i, i]) * (nugget[i] + 1/sampleSize[i]);
	}
	projSigma <- (projMat)' * Sigma * projMat;
}
model {
	for(i in 1:N) nugget[i] ~ exponential(1);					// prior on nugget
	mu ~ exponential(1);										// prior on cluster shared drift
	for(i in 1:N) w[i] ~ dirichlet(DirichAlpha);				// prior on admixture proportions
	for(i in 1:K) DirichAlpha[i] ~ exponential(dirichHPs[i]);	// hyperprior on dirichlet conc. params.
	obsSigma ~ wishart(L,projSigma);							// likelihood function
}